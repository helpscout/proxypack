diff a/src/rpcServer/index.js b/src/rpcServer/index.js	(rejected hunks)
@@ -5,27 +5,34 @@ const _browser = require('../browser')
-
-function init({
-    onExternalMappingsChange
-}) {
-    const server = http.createServer(requestListener)
-    const PORT = 17777
-    console.log(`ðŸŽ­ ProxyPackRPCServer started on localhost:${PORT}`)
-
-    const methods = {
-        setExternalMappings: {
-            exec(externalMappings) {
-                return new Promise((resolve) => {
-                    onExternalMappingsChange(externalMappings)
-                    resolve(externalMappings)
-                })
-            }
-        },
-        openBrowser: {
-            exec(params) {
-                return new Promise((resolve) => {
-                    const { browser, domain } = params
-                    _browser.initBrowser({ browser, domain })
-                    resolve({
-                        openBrowser: 'success'
-                    })
-                })
-            }
+function init({ onExternalMappingsChange }) {
+  const server = http.createServer(requestListener)
+  const PORT = 17777
+  console.log(`ðŸŽ­ ProxyPackRPCServer started on localhost:${PORT}`)
+
+  const methods = {
+    setExternalMappings: {
+      exec(externalMappings) {
+        return new Promise(resolve => {
+          onExternalMappingsChange(externalMappings)
+          resolve(externalMappings)
+        })
+      },
+    },
+    openBrowser: {
+      exec(params) {
+        return new Promise(resolve => {
+          const { browser, domain } = params
+          _browser.initBrowser({ browser, domain })
+          resolve({
+            openBrowser: 'success',
+          })
+        })
+      },
+    },
+  }
+
+  let routes = {
+    // this is the rpc endpoint
+    // every operation request will come through here
+    '/rpc': function(body) {
+      return new Promise((resolve, reject) => {
+        if (!body) {
+          throw new `rpc request was expecting some data...!`()
@@ -33,41 +40,11 @@ function init({
-    }
-
-    let routes = {
-            // this is the rpc endpoint
-            // every operation request will come through here
-            '/rpc': function (body) {
-                return new Promise((resolve, reject) => {
-                    if (!body) {
-                        throw new (`rpc request was expecting some data...!`)
-                    }
-                    let _json = JSON.parse(body) // might throw error
-                    let keys = Object.keys(_json)
-                    let promiseArr = []
-
-                    for (let key of keys) {
-                        if (methods[key] && typeof (methods[key].exec) === 'function') {
-                            let execPromise = methods[key].exec.call(null, _json[key])
-                            if (!(execPromise instanceof Promise)) {
-                                throw new Error(`ProxyPack, RPCError, Exec on ${key} did not return a promise`)
-                            }
-                            promiseArr.push(execPromise)
-                        } else {
-                            let execPromise = Promise.resolve({
-                                error: 'ProxyPack, RPCError method not defined'
-                            })
-                            promiseArr.push(execPromise)
-                        }
-                    }
-
-                    Promise.all(promiseArr).then(iter => {
-                        console.log(iter)
-                        let response = {}
-                        iter.forEach((val, index) => {
-                            response[keys[index]] = val
-                        })
-
-                        resolve(response)
-                    }).catch(err => {
-                        reject(err)
-                    })
-                })
+        let _json = JSON.parse(body) // might throw error
+        let keys = Object.keys(_json)
+        let promiseArr = []
+
+        for (let key of keys) {
+          if (methods[key] && typeof methods[key].exec === 'function') {
+            let execPromise = methods[key].exec.call(null, _json[key])
+            if (!(execPromise instanceof Promise)) {
+              throw new Error(
+                `ProxyPack, RPCError, Exec on ${key} did not return a promise`,
+              )
@@ -77,2 +61,19 @@ function init({
-    function requestListener(request, response) {
-            let reqUrl = `http://${request.headers.host}${request.url}`
+        Promise.all(promiseArr)
+          .then(iter => {
+            console.log(iter)
+            let response = {}
+            iter.forEach((val, index) => {
+              response[keys[index]] = val
+            })
+
+            resolve(response)
+          })
+          .catch(err => {
+            reject(err)
+          })
+      })
+    },
+  }
+
+  function requestListener(request, response) {
+    let reqUrl = `http://${request.headers.host}${request.url}`
@@ -87,3 +88,9 @@ function init({
-    response.setHeader("Access-Control-Allow-Origin", "*")
-    response.setHeader("Access-Control-Allow-Methods", "POST, GET, PUT, DELETE, OPTIONS")
-    response.setHeader("Access-Control-Allow-Headers", "Authorization, Origin, application/json, X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept, Accept-Encoding, Accept-Language, Access-Control-Request-Headers, Access-Control-Request-Method, Cache-Control, Connection")
+    response.setHeader('Access-Control-Allow-Origin', '*')
+    response.setHeader(
+      'Access-Control-Allow-Methods',
+      'POST, GET, PUT, DELETE, OPTIONS',
+    )
+    response.setHeader(
+      'Access-Control-Allow-Headers',
+      'Authorization, Origin, application/json, X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept, Accept-Encoding, Accept-Language, Access-Control-Request-Headers, Access-Control-Request-Method, Cache-Control, Connection',
+    )
@@ -94,3 +100,2 @@ function init({
-
-        response.end()
-        return
+      response.end()
+      return
@@ -105,5 +109,5 @@ function init({
-        if (buf === null) {
-            buf = data
-        } else {
-            buf = buf + data
-        }
+      if (buf === null) {
+        buf = data
+      } else {
+        buf = buf + data
+      }
@@ -114,21 +118 @@ function init({
-        let body = buf !== null ? buf.toString() : null
-
-        if (routes[pathname]) {
-            let compute = routes[pathname].call(null, body)
-
-            if (!(compute instanceof Promise)) {
-                // we're kinda expecting compute to be a promise
-                // so if it isn't, just avoid it
-
-                response.statusCode = 500
-                response.end('ProxyPack, RPCError, oops! server error!')
-                console.warn(`ProxyPack, RPCError, whatever I got from rpc wasn't a Promise!`)
-            } else {
-                compute.then(res => {
-                    response.end(JSON.stringify(res))
-                }).catch(err => {
-                    console.error(err)
-                    response.statusCode = 500
-                    response.end('ProxyPack, RPCError, oops! server error!')
-                })
-            }
+      let body = buf !== null ? buf.toString() : null
@@ -137,2 +133,9 @@ function init({
-            response.statusCode = 404
-            response.end(`ProxyPack, RPCError, oops! ${pathname} not found here`)
+          compute
+            .then(res => {
+              response.end(JSON.stringify(res))
+            })
+            .catch(err => {
+              console.error(err)
+              response.statusCode = 500
+              response.end('ProxyPack, RPCError, oops! server error!')
+            })
@@ -143,2 +150,2 @@ function init({
-// now we can start up the server
-server.listen(PORT)
+  // now we can start up the server
+  server.listen(PORT)
@@ -148 +155 @@ module.exports = {
-    init
+  init,
